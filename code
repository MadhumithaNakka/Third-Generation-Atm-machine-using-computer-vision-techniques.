from flask import Flask, render_template, request, jsonify
import cv2
import numpy as np
import random

app = Flask(__name__)

def validate_pin(pin):
    # In a real-world scenario, validate the PIN against a database
    return pin == "1234"

def recognize_face(image_path):
    # In a real-world scenario, use a face recognition model
    # For simplicity, we'll use a random decision here
    return random.choice([True, False])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/authenticate', methods=['POST'])
def authenticate():
    try:
        pin = request.json['pin']
        image_data = request.json['image']

        # Validate PIN
        if not validate_pin(pin):
            return jsonify({'message': 'Invalid PIN'}), 401

        # Validate face using computer vision
        if not recognize_face_from_image(image_data):
            return jsonify({'message': 'Face not recognized'}), 401

        return jsonify({'message': 'Authentication successful'}), 200
    except Exception as e:
        return jsonify({'message': str(e)}), 500

def recognize_face_from_image(image_data):
    # Convert base64 image data to OpenCV format
    nparr = np.frombuffer(image_data, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

    # In a real-world scenario, use a face recognition model
    # Here, we'll use a simple example for demonstration
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml').detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    return len(faces) > 0

if __name__ == '__main__':
    app.run(debug=True)
